{
  "description": "PodPresetSpec is a description of a pod preset.", 
  "properties": {
    "volumes": {
      "items": {
        "required": [
          "name"
        ], 
        "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.", 
        "properties": {
          "portworxVolume": {
            "required": [
              "volumeID"
            ], 
            "description": "PortworxVolumeSource represents a Portworx volume resource.", 
            "properties": {
              "readOnly": {
                "type": "boolean", 
                "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
              }, 
              "volumeID": {
                "type": "string", 
                "description": "VolumeID uniquely identifies a Portworx volume"
              }, 
              "fsType": {
                "type": "string", 
                "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
              }
            }
          }, 
          "glusterfs": {
            "required": [
              "endpoints", 
              "path"
            ], 
            "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.", 
            "properties": {
              "path": {
                "type": "string", 
                "description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
              }, 
              "endpoints": {
                "type": "string", 
                "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
              }
            }
          }, 
          "gitRepo": {
            "required": [
              "repository"
            ], 
            "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.", 
            "properties": {
              "directory": {
                "type": "string", 
                "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
              }, 
              "repository": {
                "type": "string", 
                "description": "Repository URL"
              }, 
              "revision": {
                "type": "string", 
                "description": "Commit hash for the specified revision."
              }
            }
          }, 
          "flocker": {
            "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.", 
            "properties": {
              "datasetName": {
                "type": "string", 
                "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
              }, 
              "datasetUUID": {
                "type": "string", 
                "description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
              }
            }
          }, 
          "storageos": {
            "description": "Represents a StorageOS persistent volume resource.", 
            "properties": {
              "volumeName": {
                "type": "string", 
                "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
              }, 
              "volumeNamespace": {
                "type": "string", 
                "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
              }, 
              "secretRef": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }
                }
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
              }
            }
          }, 
          "iscsi": {
            "required": [
              "targetPortal", 
              "iqn", 
              "lun"
            ], 
            "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "targetPortal": {
                "type": "string", 
                "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
              }, 
              "portals": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
              }, 
              "secretRef": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }
                }
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
              }, 
              "chapAuthSession": {
                "type": "boolean", 
                "description": "whether support iSCSI Session CHAP authentication"
              }, 
              "initiatorName": {
                "type": "string", 
                "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection."
              }, 
              "iscsiInterface": {
                "type": "string", 
                "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp)."
              }, 
              "iqn": {
                "type": "string", 
                "description": "Target iSCSI Qualified Name."
              }, 
              "chapAuthDiscovery": {
                "type": "boolean", 
                "description": "whether support iSCSI Discovery CHAP authentication"
              }, 
              "lun": {
                "type": "integer", 
                "description": "iSCSI Target Lun number.", 
                "format": "int32"
              }
            }
          }, 
          "projected": {
            "required": [
              "sources"
            ], 
            "description": "Represents a projected volume source", 
            "properties": {
              "sources": {
                "items": {
                  "description": "Projection that may be projected along with other supported volume types", 
                  "properties": {
                    "configMap": {
                      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.", 
                      "properties": {
                        "items": {
                          "items": {
                            "required": [
                              "key", 
                              "path"
                            ], 
                            "description": "Maps a string key to a path within a volume.", 
                            "properties": {
                              "path": {
                                "type": "string", 
                                "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                              }, 
                              "mode": {
                                "type": "integer", 
                                "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                                "format": "int32"
                              }, 
                              "key": {
                                "type": "string", 
                                "description": "The key to project."
                              }
                            }
                          }, 
                          "type": "array", 
                          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                        }, 
                        "optional": {
                          "type": "boolean", 
                          "description": "Specify whether the ConfigMap or it's keys must be defined"
                        }, 
                        "name": {
                          "type": "string", 
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                        }
                      }
                    }, 
                    "secret": {
                      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.", 
                      "properties": {
                        "items": {
                          "items": {
                            "required": [
                              "key", 
                              "path"
                            ], 
                            "description": "Maps a string key to a path within a volume.", 
                            "properties": {
                              "path": {
                                "type": "string", 
                                "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                              }, 
                              "mode": {
                                "type": "integer", 
                                "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                                "format": "int32"
                              }, 
                              "key": {
                                "type": "string", 
                                "description": "The key to project."
                              }
                            }
                          }, 
                          "type": "array", 
                          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
                        }, 
                        "optional": {
                          "type": "boolean", 
                          "description": "Specify whether the Secret or its key must be defined"
                        }, 
                        "name": {
                          "type": "string", 
                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                        }
                      }
                    }, 
                    "downwardAPI": {
                      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.", 
                      "properties": {
                        "items": {
                          "items": {
                            "required": [
                              "path"
                            ], 
                            "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field", 
                            "properties": {
                              "path": {
                                "type": "string", 
                                "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
                              }, 
                              "fieldRef": {
                                "required": [
                                  "fieldPath"
                                ], 
                                "description": "ObjectFieldSelector selects an APIVersioned field of an object.", 
                                "properties": {
                                  "fieldPath": {
                                    "type": "string", 
                                    "description": "Path of the field to select in the specified API version."
                                  }, 
                                  "apiVersion": {
                                    "type": "string", 
                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                                  }
                                }
                              }, 
                              "mode": {
                                "type": "integer", 
                                "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                                "format": "int32"
                              }, 
                              "resourceFieldRef": {
                                "required": [
                                  "resource"
                                ], 
                                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format", 
                                "properties": {
                                  "containerName": {
                                    "type": "string", 
                                    "description": "Container name: required for volumes, optional for env vars"
                                  }, 
                                  "resource": {
                                    "type": "string", 
                                    "description": "Required: resource to select"
                                  }, 
                                  "divisor": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      }, 
                                      {
                                        "type": "integer"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }, 
                          "type": "array", 
                          "description": "Items is a list of DownwardAPIVolume file"
                        }
                      }
                    }
                  }
                }, 
                "type": "array", 
                "description": "list of volume projections"
              }, 
              "defaultMode": {
                "type": "integer", 
                "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }
            }
          }, 
          "secret": {
            "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "items": {
                "items": {
                  "required": [
                    "key", 
                    "path"
                  ], 
                  "description": "Maps a string key to a path within a volume.", 
                  "properties": {
                    "path": {
                      "type": "string", 
                      "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                    }, 
                    "mode": {
                      "type": "integer", 
                      "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                      "format": "int32"
                    }, 
                    "key": {
                      "type": "string", 
                      "description": "The key to project."
                    }
                  }
                }, 
                "type": "array", 
                "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
              }, 
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the Secret or it's keys must be defined"
              }, 
              "defaultMode": {
                "type": "integer", 
                "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }, 
              "secretName": {
                "type": "string", 
                "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
              }
            }
          }, 
          "flexVolume": {
            "required": [
              "driver"
            ], 
            "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.", 
            "properties": {
              "readOnly": {
                "type": "boolean", 
                "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
              }, 
              "options": {
                "additionalProperties": {
                  "type": "string"
                }, 
                "type": "object", 
                "description": "Optional: Extra command options if any."
              }, 
              "driver": {
                "type": "string", 
                "description": "Driver is the name of the driver to use for this volume."
              }, 
              "secretRef": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }
                }
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
              }
            }
          }, 
          "photonPersistentDisk": {
            "required": [
              "pdID"
            ], 
            "description": "Represents a Photon Controller persistent disk resource.", 
            "properties": {
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
              }, 
              "pdID": {
                "type": "string", 
                "description": "ID that identifies Photon Controller persistent disk"
              }
            }
          }, 
          "azureDisk": {
            "required": [
              "diskName", 
              "diskURI"
            ], 
            "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.", 
            "properties": {
              "diskName": {
                "type": "string", 
                "description": "The Name of the data disk in the blob storage"
              }, 
              "cachingMode": {
                "type": "string", 
                "description": "Host Caching mode: None, Read Only, Read Write."
              }, 
              "kind": {
                "type": "string", 
                "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
              }, 
              "diskURI": {
                "type": "string", 
                "description": "The URI the data disk in the blob storage"
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
              }
            }
          }, 
          "fc": {
            "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "targetWWNs": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "Optional: FC target worldwide names (WWNs)"
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
              }, 
              "lun": {
                "type": "integer", 
                "description": "Optional: FC target lun number", 
                "format": "int32"
              }, 
              "wwids": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously."
              }
            }
          }, 
          "scaleIO": {
            "required": [
              "gateway", 
              "system", 
              "secretRef"
            ], 
            "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume", 
            "properties": {
              "storageMode": {
                "type": "string", 
                "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned."
              }, 
              "secretRef": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }
                }
              }, 
              "protectionDomain": {
                "type": "string", 
                "description": "The name of the ScaleIO Protection Domain for the configured storage."
              }, 
              "volumeName": {
                "type": "string", 
                "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source."
              }, 
              "sslEnabled": {
                "type": "boolean", 
                "description": "Flag to enable/disable SSL communication with Gateway, default false"
              }, 
              "system": {
                "type": "string", 
                "description": "The name of the storage system as configured in ScaleIO."
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
              }, 
              "storagePool": {
                "type": "string", 
                "description": "The ScaleIO Storage Pool associated with the protection domain."
              }, 
              "gateway": {
                "type": "string", 
                "description": "The host address of the ScaleIO API Gateway."
              }
            }
          }, 
          "emptyDir": {
            "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "sizeLimit": {
                "oneOf": [
                  {
                    "type": "string"
                  }, 
                  {
                    "type": "integer"
                  }
                ]
              }, 
              "medium": {
                "type": "string", 
                "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
              }
            }
          }, 
          "persistentVolumeClaim": {
            "required": [
              "claimName"
            ], 
            "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).", 
            "properties": {
              "readOnly": {
                "type": "boolean", 
                "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
              }, 
              "claimName": {
                "type": "string", 
                "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
              }
            }
          }, 
          "configMap": {
            "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "items": {
                "items": {
                  "required": [
                    "key", 
                    "path"
                  ], 
                  "description": "Maps a string key to a path within a volume.", 
                  "properties": {
                    "path": {
                      "type": "string", 
                      "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                    }, 
                    "mode": {
                      "type": "integer", 
                      "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                      "format": "int32"
                    }, 
                    "key": {
                      "type": "string", 
                      "description": "The key to project."
                    }
                  }
                }, 
                "type": "array", 
                "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
              }, 
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the ConfigMap or it's keys must be defined"
              }, 
              "defaultMode": {
                "type": "integer", 
                "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }, 
          "cephfs": {
            "required": [
              "monitors"
            ], 
            "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.", 
            "properties": {
              "secretRef": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }
                }
              }, 
              "secretFile": {
                "type": "string", 
                "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
              }, 
              "user": {
                "type": "string", 
                "description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
              }, 
              "path": {
                "type": "string", 
                "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
              }, 
              "monitors": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
              }
            }
          }, 
          "name": {
            "type": "string", 
            "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
          }, 
          "azureFile": {
            "required": [
              "secretName", 
              "shareName"
            ], 
            "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.", 
            "properties": {
              "shareName": {
                "type": "string", 
                "description": "Share Name"
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
              }, 
              "secretName": {
                "type": "string", 
                "description": "the name of secret that contains Azure Storage Account Name and Key"
              }
            }
          }, 
          "quobyte": {
            "required": [
              "registry", 
              "volume"
            ], 
            "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.", 
            "properties": {
              "volume": {
                "type": "string", 
                "description": "Volume is a string that references an already created Quobyte volume by name."
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
              }, 
              "group": {
                "type": "string", 
                "description": "Group to map volume access to Default is no group"
              }, 
              "registry": {
                "type": "string", 
                "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
              }, 
              "user": {
                "type": "string", 
                "description": "User to map volume access to Defaults to serivceaccount user"
              }
            }
          }, 
          "hostPath": {
            "required": [
              "path"
            ], 
            "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.", 
            "properties": {
              "path": {
                "type": "string", 
                "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
              }, 
              "type": {
                "type": "string", 
                "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
              }
            }
          }, 
          "nfs": {
            "required": [
              "server", 
              "path"
            ], 
            "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.", 
            "properties": {
              "path": {
                "type": "string", 
                "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
              }, 
              "server": {
                "type": "string", 
                "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
              }
            }
          }, 
          "gcePersistentDisk": {
            "required": [
              "pdName"
            ], 
            "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.", 
            "properties": {
              "readOnly": {
                "type": "boolean", 
                "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
              }, 
              "partition": {
                "type": "integer", 
                "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk", 
                "format": "int32"
              }, 
              "pdName": {
                "type": "string", 
                "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
              }
            }
          }, 
          "cinder": {
            "required": [
              "volumeID"
            ], 
            "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "readOnly": {
                "type": "boolean", 
                "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
              }, 
              "volumeID": {
                "type": "string", 
                "description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
              }
            }
          }, 
          "awsElasticBlockStore": {
            "required": [
              "volumeID"
            ], 
            "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "readOnly": {
                "type": "boolean", 
                "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
              }, 
              "partition": {
                "type": "integer", 
                "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).", 
                "format": "int32"
              }, 
              "volumeID": {
                "type": "string", 
                "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
              }
            }
          }, 
          "rbd": {
            "required": [
              "monitors", 
              "image"
            ], 
            "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "secretRef": {
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }
                }
              }, 
              "image": {
                "type": "string", 
                "description": "The rados image name. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
              }, 
              "keyring": {
                "type": "string", 
                "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
              }, 
              "user": {
                "type": "string", 
                "description": "The rados user name. Default is admin. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
              }, 
              "monitors": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "A collection of Ceph monitors. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
              }, 
              "pool": {
                "type": "string", 
                "description": "The rados pool name. Default is rbd. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
              }
            }
          }, 
          "downwardAPI": {
            "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "items": {
                "items": {
                  "required": [
                    "path"
                  ], 
                  "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field", 
                  "properties": {
                    "path": {
                      "type": "string", 
                      "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
                    }, 
                    "fieldRef": {
                      "required": [
                        "fieldPath"
                      ], 
                      "description": "ObjectFieldSelector selects an APIVersioned field of an object.", 
                      "properties": {
                        "fieldPath": {
                          "type": "string", 
                          "description": "Path of the field to select in the specified API version."
                        }, 
                        "apiVersion": {
                          "type": "string", 
                          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                        }
                      }
                    }, 
                    "mode": {
                      "type": "integer", 
                      "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                      "format": "int32"
                    }, 
                    "resourceFieldRef": {
                      "required": [
                        "resource"
                      ], 
                      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format", 
                      "properties": {
                        "containerName": {
                          "type": "string", 
                          "description": "Container name: required for volumes, optional for env vars"
                        }, 
                        "resource": {
                          "type": "string", 
                          "description": "Required: resource to select"
                        }, 
                        "divisor": {
                          "oneOf": [
                            {
                              "type": "string"
                            }, 
                            {
                              "type": "integer"
                            }
                          ]
                        }
                      }
                    }
                  }
                }, 
                "type": "array", 
                "description": "Items is a list of downward API volume file"
              }, 
              "defaultMode": {
                "type": "integer", 
                "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }
            }
          }, 
          "vsphereVolume": {
            "required": [
              "volumePath"
            ], 
            "description": "Represents a vSphere volume resource.", 
            "properties": {
              "storagePolicyName": {
                "type": "string", 
                "description": "Storage Policy Based Management (SPBM) profile name."
              }, 
              "fsType": {
                "type": "string", 
                "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
              }, 
              "storagePolicyID": {
                "type": "string", 
                "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
              }, 
              "volumePath": {
                "type": "string", 
                "description": "Path that identifies vSphere volume vmdk"
              }
            }
          }
        }
      }, 
      "type": "array", 
      "description": "Volumes defines the collection of Volume to inject into the pod."
    }, 
    "volumeMounts": {
      "items": {
        "required": [
          "name", 
          "mountPath"
        ], 
        "description": "VolumeMount describes a mounting of a Volume within a container.", 
        "properties": {
          "readOnly": {
            "type": "boolean", 
            "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
          }, 
          "mountPropagation": {
            "type": "string", 
            "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10."
          }, 
          "subPath": {
            "type": "string", 
            "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
          }, 
          "name": {
            "type": "string", 
            "description": "This must match the Name of a Volume."
          }, 
          "mountPath": {
            "type": "string", 
            "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
          }
        }
      }, 
      "type": "array", 
      "description": "VolumeMounts defines the collection of VolumeMount to inject into containers."
    }, 
    "env": {
      "items": {
        "required": [
          "name"
        ], 
        "description": "EnvVar represents an environment variable present in a Container.", 
        "properties": {
          "valueFrom": {
            "description": "EnvVarSource represents a source for the value of an EnvVar.", 
            "properties": {
              "secretKeyRef": {
                "required": [
                  "key"
                ], 
                "description": "SecretKeySelector selects a key of a Secret.", 
                "properties": {
                  "optional": {
                    "type": "boolean", 
                    "description": "Specify whether the Secret or it's key must be defined"
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "key": {
                    "type": "string", 
                    "description": "The key of the secret to select from.  Must be a valid secret key."
                  }
                }
              }, 
              "fieldRef": {
                "required": [
                  "fieldPath"
                ], 
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.", 
                "properties": {
                  "fieldPath": {
                    "type": "string", 
                    "description": "Path of the field to select in the specified API version."
                  }, 
                  "apiVersion": {
                    "type": "string", 
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                  }
                }
              }, 
              "configMapKeyRef": {
                "required": [
                  "key"
                ], 
                "description": "Selects a key from a ConfigMap.", 
                "properties": {
                  "optional": {
                    "type": "boolean", 
                    "description": "Specify whether the ConfigMap or it's key must be defined"
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "key": {
                    "type": "string", 
                    "description": "The key to select."
                  }
                }
              }, 
              "resourceFieldRef": {
                "required": [
                  "resource"
                ], 
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format", 
                "properties": {
                  "containerName": {
                    "type": "string", 
                    "description": "Container name: required for volumes, optional for env vars"
                  }, 
                  "resource": {
                    "type": "string", 
                    "description": "Required: resource to select"
                  }, 
                  "divisor": {
                    "oneOf": [
                      {
                        "type": "string"
                      }, 
                      {
                        "type": "integer"
                      }
                    ]
                  }
                }
              }
            }
          }, 
          "name": {
            "type": "string", 
            "description": "Name of the environment variable. Must be a C_IDENTIFIER."
          }, 
          "value": {
            "type": "string", 
            "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
          }
        }
      }, 
      "type": "array", 
      "description": "Env defines the collection of EnvVar to inject into containers."
    }, 
    "envFrom": {
      "items": {
        "description": "EnvFromSource represents the source of a set of ConfigMaps", 
        "properties": {
          "prefix": {
            "type": "string", 
            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
          }, 
          "configMapRef": {
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.", 
            "properties": {
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the ConfigMap must be defined"
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }, 
          "secretRef": {
            "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.", 
            "properties": {
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the Secret must be defined"
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }
        }
      }, 
      "type": "array", 
      "description": "EnvFrom defines the collection of EnvFromSource to inject into containers."
    }, 
    "selector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
      "properties": {
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
        }, 
        "matchExpressions": {
          "items": {
            "required": [
              "key", 
              "operator"
            ], 
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
            "properties": {
              "operator": {
                "type": "string", 
                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
              }, 
              "values": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
              }, 
              "key": {
                "x-kubernetes-patch-merge-key": "key", 
                "type": "string", 
                "description": "key is the label key that the selector applies to.", 
                "x-kubernetes-patch-strategy": "merge"
              }
            }
          }, 
          "type": "array", 
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
        }
      }
    }
  }
}