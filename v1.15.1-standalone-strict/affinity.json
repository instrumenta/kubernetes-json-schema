{
  "additionalProperties": false, 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "description": "Affinity is a group of affinity scheduling rules.", 
  "properties": {
    "podAffinity": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.", 
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "topologyKey"
            ], 
            "type": "object", 
            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running", 
            "properties": {
              "labelSelector": {
                "additionalProperties": false, 
                "type": "object", 
                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
                "properties": {
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    }, 
                    "type": "object", 
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                  }, 
                  "matchExpressions": {
                    "items": {
                      "additionalProperties": false, 
                      "required": [
                        "key", 
                        "operator"
                      ], 
                      "type": "object", 
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                      "properties": {
                        "operator": {
                          "type": "string", 
                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                        }, 
                        "values": {
                          "items": {
                            "type": "string"
                          }, 
                          "type": "array", 
                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                        }, 
                        "key": {
                          "x-kubernetes-patch-merge-key": "key", 
                          "type": "string", 
                          "description": "key is the label key that the selector applies to.", 
                          "x-kubernetes-patch-strategy": "merge"
                        }
                      }
                    }, 
                    "type": "array", 
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                  }
                }
              }, 
              "namespaces": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
              }, 
              "topologyKey": {
                "type": "string", 
                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
              }
            }
          }, 
          "type": "array", 
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
        }, 
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "weight", 
              "podAffinityTerm"
            ], 
            "type": "object", 
            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", 
            "properties": {
              "podAffinityTerm": {
                "additionalProperties": false, 
                "required": [
                  "topologyKey"
                ], 
                "type": "object", 
                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running", 
                "properties": {
                  "labelSelector": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        }, 
                        "type": "object", 
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                      }, 
                      "matchExpressions": {
                        "items": {
                          "additionalProperties": false, 
                          "required": [
                            "key", 
                            "operator"
                          ], 
                          "type": "object", 
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                          "properties": {
                            "operator": {
                              "type": "string", 
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                            }, 
                            "values": {
                              "items": {
                                "type": "string"
                              }, 
                              "type": "array", 
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                            }, 
                            "key": {
                              "x-kubernetes-patch-merge-key": "key", 
                              "type": "string", 
                              "description": "key is the label key that the selector applies to.", 
                              "x-kubernetes-patch-strategy": "merge"
                            }
                          }
                        }, 
                        "type": "array", 
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                      }
                    }
                  }, 
                  "namespaces": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                  }, 
                  "topologyKey": {
                    "type": "string", 
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                  }
                }
              }, 
              "weight": {
                "type": "integer", 
                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.", 
                "format": "int32"
              }
            }
          }, 
          "type": "array", 
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
        }
      }
    }, 
    "nodeAffinity": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Node affinity is a group of node affinity scheduling rules.", 
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "additionalProperties": false, 
          "required": [
            "nodeSelectorTerms"
          ], 
          "type": "object", 
          "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.", 
          "properties": {
            "nodeSelectorTerms": {
              "items": {
                "additionalProperties": false, 
                "type": "object", 
                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", 
                "properties": {
                  "matchFields": {
                    "items": {
                      "additionalProperties": false, 
                      "required": [
                        "key", 
                        "operator"
                      ], 
                      "type": "object", 
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                      "properties": {
                        "operator": {
                          "type": "string", 
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                        }, 
                        "values": {
                          "items": {
                            "type": "string"
                          }, 
                          "type": "array", 
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                        }, 
                        "key": {
                          "type": "string", 
                          "description": "The label key that the selector applies to."
                        }
                      }
                    }, 
                    "type": "array", 
                    "description": "A list of node selector requirements by node's fields."
                  }, 
                  "matchExpressions": {
                    "items": {
                      "additionalProperties": false, 
                      "required": [
                        "key", 
                        "operator"
                      ], 
                      "type": "object", 
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                      "properties": {
                        "operator": {
                          "type": "string", 
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                        }, 
                        "values": {
                          "items": {
                            "type": "string"
                          }, 
                          "type": "array", 
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                        }, 
                        "key": {
                          "type": "string", 
                          "description": "The label key that the selector applies to."
                        }
                      }
                    }, 
                    "type": "array", 
                    "description": "A list of node selector requirements by node's labels."
                  }
                }
              }, 
              "type": "array", 
              "description": "Required. A list of node selector terms. The terms are ORed."
            }
          }
        }, 
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "weight", 
              "preference"
            ], 
            "type": "object", 
            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).", 
            "properties": {
              "preference": {
                "additionalProperties": false, 
                "type": "object", 
                "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", 
                "properties": {
                  "matchFields": {
                    "items": {
                      "additionalProperties": false, 
                      "required": [
                        "key", 
                        "operator"
                      ], 
                      "type": "object", 
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                      "properties": {
                        "operator": {
                          "type": "string", 
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                        }, 
                        "values": {
                          "items": {
                            "type": "string"
                          }, 
                          "type": "array", 
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                        }, 
                        "key": {
                          "type": "string", 
                          "description": "The label key that the selector applies to."
                        }
                      }
                    }, 
                    "type": "array", 
                    "description": "A list of node selector requirements by node's fields."
                  }, 
                  "matchExpressions": {
                    "items": {
                      "additionalProperties": false, 
                      "required": [
                        "key", 
                        "operator"
                      ], 
                      "type": "object", 
                      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                      "properties": {
                        "operator": {
                          "type": "string", 
                          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                        }, 
                        "values": {
                          "items": {
                            "type": "string"
                          }, 
                          "type": "array", 
                          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                        }, 
                        "key": {
                          "type": "string", 
                          "description": "The label key that the selector applies to."
                        }
                      }
                    }, 
                    "type": "array", 
                    "description": "A list of node selector requirements by node's labels."
                  }
                }
              }, 
              "weight": {
                "type": "integer", 
                "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.", 
                "format": "int32"
              }
            }
          }, 
          "type": "array", 
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
        }
      }
    }, 
    "podAntiAffinity": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.", 
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "topologyKey"
            ], 
            "type": "object", 
            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running", 
            "properties": {
              "labelSelector": {
                "additionalProperties": false, 
                "type": "object", 
                "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
                "properties": {
                  "matchLabels": {
                    "additionalProperties": {
                      "type": "string"
                    }, 
                    "type": "object", 
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                  }, 
                  "matchExpressions": {
                    "items": {
                      "additionalProperties": false, 
                      "required": [
                        "key", 
                        "operator"
                      ], 
                      "type": "object", 
                      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                      "properties": {
                        "operator": {
                          "type": "string", 
                          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                        }, 
                        "values": {
                          "items": {
                            "type": "string"
                          }, 
                          "type": "array", 
                          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                        }, 
                        "key": {
                          "x-kubernetes-patch-merge-key": "key", 
                          "type": "string", 
                          "description": "key is the label key that the selector applies to.", 
                          "x-kubernetes-patch-strategy": "merge"
                        }
                      }
                    }, 
                    "type": "array", 
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                  }
                }
              }, 
              "namespaces": {
                "items": {
                  "type": "string"
                }, 
                "type": "array", 
                "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
              }, 
              "topologyKey": {
                "type": "string", 
                "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
              }
            }
          }, 
          "type": "array", 
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
        }, 
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "weight", 
              "podAffinityTerm"
            ], 
            "type": "object", 
            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", 
            "properties": {
              "podAffinityTerm": {
                "additionalProperties": false, 
                "required": [
                  "topologyKey"
                ], 
                "type": "object", 
                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running", 
                "properties": {
                  "labelSelector": {
                    "additionalProperties": false, 
                    "type": "object", 
                    "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
                    "properties": {
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        }, 
                        "type": "object", 
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
                      }, 
                      "matchExpressions": {
                        "items": {
                          "additionalProperties": false, 
                          "required": [
                            "key", 
                            "operator"
                          ], 
                          "type": "object", 
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                          "properties": {
                            "operator": {
                              "type": "string", 
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                            }, 
                            "values": {
                              "items": {
                                "type": "string"
                              }, 
                              "type": "array", 
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
                            }, 
                            "key": {
                              "x-kubernetes-patch-merge-key": "key", 
                              "type": "string", 
                              "description": "key is the label key that the selector applies to.", 
                              "x-kubernetes-patch-strategy": "merge"
                            }
                          }
                        }, 
                        "type": "array", 
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
                      }
                    }
                  }, 
                  "namespaces": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\""
                  }, 
                  "topologyKey": {
                    "type": "string", 
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
                  }
                }
              }, 
              "weight": {
                "type": "integer", 
                "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.", 
                "format": "int32"
              }
            }
          }, 
          "type": "array", 
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
        }
      }
    }
  }
}