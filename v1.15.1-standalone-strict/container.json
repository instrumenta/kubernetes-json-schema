{
  "description": "A single application container that you want to run within a pod.", 
  "required": [
    "name"
  ], 
  "additionalProperties": false, 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "livenessProbe": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.", 
      "properties": {
        "httpGet": {
          "additionalProperties": false, 
          "required": [
            "port"
          ], 
          "type": "object", 
          "description": "HTTPGetAction describes an action based on HTTP Get requests.", 
          "properties": {
            "path": {
              "type": "string", 
              "description": "Path to access on the HTTP server."
            }, 
            "host": {
              "type": "string", 
              "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
            }, 
            "scheme": {
              "type": "string", 
              "description": "Scheme to use for connecting to the host. Defaults to HTTP."
            }, 
            "httpHeaders": {
              "items": {
                "additionalProperties": false, 
                "required": [
                  "name", 
                  "value"
                ], 
                "type": "object", 
                "description": "HTTPHeader describes a custom header to be used in HTTP probes", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "The header field name"
                  }, 
                  "value": {
                    "type": "string", 
                    "description": "The header field value"
                  }
                }
              }, 
              "type": "array", 
              "description": "Custom headers to set in the request. HTTP allows repeated headers."
            }, 
            "port": {
              "oneOf": [
                {
                  "type": "string"
                }, 
                {
                  "type": "integer"
                }
              ]
            }
          }
        }, 
        "timeoutSeconds": {
          "type": "integer", 
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "format": "int32"
        }, 
        "exec": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "ExecAction describes a \"run in container\" action.", 
          "properties": {
            "command": {
              "items": {
                "type": "string"
              }, 
              "type": "array", 
              "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
            }
          }
        }, 
        "initialDelaySeconds": {
          "type": "integer", 
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "format": "int32"
        }, 
        "tcpSocket": {
          "additionalProperties": false, 
          "required": [
            "port"
          ], 
          "type": "object", 
          "description": "TCPSocketAction describes an action based on opening a socket", 
          "properties": {
            "host": {
              "type": "string", 
              "description": "Optional: Host name to connect to, defaults to the pod IP."
            }, 
            "port": {
              "oneOf": [
                {
                  "type": "string"
                }, 
                {
                  "type": "integer"
                }
              ]
            }
          }
        }, 
        "periodSeconds": {
          "type": "integer", 
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.", 
          "format": "int32"
        }, 
        "successThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.", 
          "format": "int32"
        }, 
        "failureThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.", 
          "format": "int32"
        }
      }
    }, 
    "stdin": {
      "type": "boolean", 
      "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
    }, 
    "terminationMessagePath": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
    }, 
    "name": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
    }, 
    "envFrom": {
      "items": {
        "additionalProperties": false, 
        "type": "object", 
        "description": "EnvFromSource represents the source of a set of ConfigMaps", 
        "properties": {
          "prefix": {
            "type": "string", 
            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
          }, 
          "configMapRef": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.", 
            "properties": {
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the ConfigMap must be defined"
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }, 
          "secretRef": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.", 
            "properties": {
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the Secret must be defined"
              }, 
              "name": {
                "type": "string", 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated."
    }, 
    "volumeMounts": {
      "items": {
        "additionalProperties": false, 
        "required": [
          "name", 
          "mountPath"
        ], 
        "type": "object", 
        "description": "VolumeMount describes a mounting of a Volume within a container.", 
        "properties": {
          "mountPath": {
            "type": "string", 
            "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
          }, 
          "name": {
            "type": "string", 
            "description": "This must match the Name of a Volume."
          }, 
          "subPath": {
            "type": "string", 
            "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
          }, 
          "readOnly": {
            "type": "boolean", 
            "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
          }, 
          "mountPropagation": {
            "type": "string", 
            "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10."
          }, 
          "subPathExpr": {
            "type": "string", 
            "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive. This field is beta in 1.15."
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.", 
      "x-kubernetes-patch-strategy": "merge", 
      "x-kubernetes-patch-merge-key": "mountPath"
    }, 
    "image": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
    }, 
    "args": {
      "items": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
    }, 
    "workingDir": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
    }, 
    "tty": {
      "type": "boolean", 
      "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
    }, 
    "terminationMessagePolicy": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
    }, 
    "volumeDevices": {
      "items": {
        "additionalProperties": false, 
        "required": [
          "name", 
          "devicePath"
        ], 
        "type": "object", 
        "description": "volumeDevice describes a mapping of a raw block device within a container.", 
        "properties": {
          "devicePath": {
            "type": "string", 
            "description": "devicePath is the path inside of the container that the device will be mapped to."
          }, 
          "name": {
            "type": "string", 
            "description": "name must match the name of a persistentVolumeClaim in the pod"
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "volumeDevices is the list of block devices to be used by the container. This is a beta feature.", 
      "x-kubernetes-patch-strategy": "merge", 
      "x-kubernetes-patch-merge-key": "devicePath"
    }, 
    "command": {
      "items": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell"
    }, 
    "env": {
      "items": {
        "additionalProperties": false, 
        "required": [
          "name"
        ], 
        "type": "object", 
        "description": "EnvVar represents an environment variable present in a Container.", 
        "properties": {
          "valueFrom": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "EnvVarSource represents a source for the value of an EnvVar.", 
            "properties": {
              "secretKeyRef": {
                "additionalProperties": false, 
                "required": [
                  "key"
                ], 
                "type": "object", 
                "description": "SecretKeySelector selects a key of a Secret.", 
                "properties": {
                  "optional": {
                    "type": "boolean", 
                    "description": "Specify whether the Secret or its key must be defined"
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "key": {
                    "type": "string", 
                    "description": "The key of the secret to select from.  Must be a valid secret key."
                  }
                }
              }, 
              "fieldRef": {
                "additionalProperties": false, 
                "required": [
                  "fieldPath"
                ], 
                "type": "object", 
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.", 
                "properties": {
                  "fieldPath": {
                    "type": "string", 
                    "description": "Path of the field to select in the specified API version."
                  }, 
                  "apiVersion": {
                    "type": "string", 
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                  }
                }
              }, 
              "configMapKeyRef": {
                "additionalProperties": false, 
                "required": [
                  "key"
                ], 
                "type": "object", 
                "description": "Selects a key from a ConfigMap.", 
                "properties": {
                  "optional": {
                    "type": "boolean", 
                    "description": "Specify whether the ConfigMap or its key must be defined"
                  }, 
                  "name": {
                    "type": "string", 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "key": {
                    "type": "string", 
                    "description": "The key to select."
                  }
                }
              }, 
              "resourceFieldRef": {
                "additionalProperties": false, 
                "required": [
                  "resource"
                ], 
                "type": "object", 
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format", 
                "properties": {
                  "containerName": {
                    "type": "string", 
                    "description": "Container name: required for volumes, optional for env vars"
                  }, 
                  "resource": {
                    "type": "string", 
                    "description": "Required: resource to select"
                  }, 
                  "divisor": {
                    "oneOf": [
                      {
                        "type": "string"
                      }, 
                      {
                        "type": "integer"
                      }
                    ]
                  }
                }
              }
            }
          }, 
          "name": {
            "type": "string", 
            "description": "Name of the environment variable. Must be a C_IDENTIFIER."
          }, 
          "value": {
            "type": "string", 
            "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "List of environment variables to set in the container. Cannot be updated.", 
      "x-kubernetes-patch-strategy": "merge", 
      "x-kubernetes-patch-merge-key": "name"
    }, 
    "imagePullPolicy": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
    }, 
    "readinessProbe": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.", 
      "properties": {
        "httpGet": {
          "additionalProperties": false, 
          "required": [
            "port"
          ], 
          "type": "object", 
          "description": "HTTPGetAction describes an action based on HTTP Get requests.", 
          "properties": {
            "path": {
              "type": "string", 
              "description": "Path to access on the HTTP server."
            }, 
            "host": {
              "type": "string", 
              "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
            }, 
            "scheme": {
              "type": "string", 
              "description": "Scheme to use for connecting to the host. Defaults to HTTP."
            }, 
            "httpHeaders": {
              "items": {
                "additionalProperties": false, 
                "required": [
                  "name", 
                  "value"
                ], 
                "type": "object", 
                "description": "HTTPHeader describes a custom header to be used in HTTP probes", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "description": "The header field name"
                  }, 
                  "value": {
                    "type": "string", 
                    "description": "The header field value"
                  }
                }
              }, 
              "type": "array", 
              "description": "Custom headers to set in the request. HTTP allows repeated headers."
            }, 
            "port": {
              "oneOf": [
                {
                  "type": "string"
                }, 
                {
                  "type": "integer"
                }
              ]
            }
          }
        }, 
        "timeoutSeconds": {
          "type": "integer", 
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "format": "int32"
        }, 
        "exec": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "ExecAction describes a \"run in container\" action.", 
          "properties": {
            "command": {
              "items": {
                "type": "string"
              }, 
              "type": "array", 
              "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
            }
          }
        }, 
        "initialDelaySeconds": {
          "type": "integer", 
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "format": "int32"
        }, 
        "tcpSocket": {
          "additionalProperties": false, 
          "required": [
            "port"
          ], 
          "type": "object", 
          "description": "TCPSocketAction describes an action based on opening a socket", 
          "properties": {
            "host": {
              "type": "string", 
              "description": "Optional: Host name to connect to, defaults to the pod IP."
            }, 
            "port": {
              "oneOf": [
                {
                  "type": "string"
                }, 
                {
                  "type": "integer"
                }
              ]
            }
          }
        }, 
        "periodSeconds": {
          "type": "integer", 
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.", 
          "format": "int32"
        }, 
        "successThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.", 
          "format": "int32"
        }, 
        "failureThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.", 
          "format": "int32"
        }
      }
    }, 
    "securityContext": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.", 
      "properties": {
        "readOnlyRootFilesystem": {
          "type": "boolean", 
          "description": "Whether this container has a read-only root filesystem. Default is false."
        }, 
        "runAsGroup": {
          "type": "integer", 
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.", 
          "format": "int64"
        }, 
        "allowPrivilegeEscalation": {
          "type": "boolean", 
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN"
        }, 
        "runAsUser": {
          "type": "integer", 
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.", 
          "format": "int64"
        }, 
        "procMount": {
          "type": "string", 
          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled."
        }, 
        "runAsNonRoot": {
          "type": "boolean", 
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }, 
        "windowsOptions": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.", 
          "properties": {
            "gmsaCredentialSpec": {
              "type": "string", 
              "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag."
            }, 
            "gmsaCredentialSpecName": {
              "type": "string", 
              "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag."
            }
          }
        }, 
        "seLinuxOptions": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "SELinuxOptions are the labels to be applied to the container", 
          "properties": {
            "role": {
              "type": "string", 
              "description": "Role is a SELinux role label that applies to the container."
            }, 
            "type": {
              "type": "string", 
              "description": "Type is a SELinux type label that applies to the container."
            }, 
            "user": {
              "type": "string", 
              "description": "User is a SELinux user label that applies to the container."
            }, 
            "level": {
              "type": "string", 
              "description": "Level is SELinux level label that applies to the container."
            }
          }
        }, 
        "capabilities": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "Adds and removes POSIX capabilities from running containers.", 
          "properties": {
            "add": {
              "items": {
                "type": "string"
              }, 
              "type": "array", 
              "description": "Added capabilities"
            }, 
            "drop": {
              "items": {
                "type": "string"
              }, 
              "type": "array", 
              "description": "Removed capabilities"
            }
          }
        }, 
        "privileged": {
          "type": "boolean", 
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
        }
      }
    }, 
    "lifecycle": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.", 
      "properties": {
        "preStop": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "Handler defines a specific action that should be taken", 
          "properties": {
            "httpGet": {
              "additionalProperties": false, 
              "required": [
                "port"
              ], 
              "type": "object", 
              "description": "HTTPGetAction describes an action based on HTTP Get requests.", 
              "properties": {
                "path": {
                  "type": "string", 
                  "description": "Path to access on the HTTP server."
                }, 
                "host": {
                  "type": "string", 
                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
                }, 
                "scheme": {
                  "type": "string", 
                  "description": "Scheme to use for connecting to the host. Defaults to HTTP."
                }, 
                "httpHeaders": {
                  "items": {
                    "additionalProperties": false, 
                    "required": [
                      "name", 
                      "value"
                    ], 
                    "type": "object", 
                    "description": "HTTPHeader describes a custom header to be used in HTTP probes", 
                    "properties": {
                      "name": {
                        "type": "string", 
                        "description": "The header field name"
                      }, 
                      "value": {
                        "type": "string", 
                        "description": "The header field value"
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "Custom headers to set in the request. HTTP allows repeated headers."
                }, 
                "port": {
                  "oneOf": [
                    {
                      "type": "string"
                    }, 
                    {
                      "type": "integer"
                    }
                  ]
                }
              }
            }, 
            "tcpSocket": {
              "additionalProperties": false, 
              "required": [
                "port"
              ], 
              "type": "object", 
              "description": "TCPSocketAction describes an action based on opening a socket", 
              "properties": {
                "host": {
                  "type": "string", 
                  "description": "Optional: Host name to connect to, defaults to the pod IP."
                }, 
                "port": {
                  "oneOf": [
                    {
                      "type": "string"
                    }, 
                    {
                      "type": "integer"
                    }
                  ]
                }
              }
            }, 
            "exec": {
              "additionalProperties": false, 
              "type": "object", 
              "description": "ExecAction describes a \"run in container\" action.", 
              "properties": {
                "command": {
                  "items": {
                    "type": "string"
                  }, 
                  "type": "array", 
                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
                }
              }
            }
          }
        }, 
        "postStart": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "Handler defines a specific action that should be taken", 
          "properties": {
            "httpGet": {
              "additionalProperties": false, 
              "required": [
                "port"
              ], 
              "type": "object", 
              "description": "HTTPGetAction describes an action based on HTTP Get requests.", 
              "properties": {
                "path": {
                  "type": "string", 
                  "description": "Path to access on the HTTP server."
                }, 
                "host": {
                  "type": "string", 
                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
                }, 
                "scheme": {
                  "type": "string", 
                  "description": "Scheme to use for connecting to the host. Defaults to HTTP."
                }, 
                "httpHeaders": {
                  "items": {
                    "additionalProperties": false, 
                    "required": [
                      "name", 
                      "value"
                    ], 
                    "type": "object", 
                    "description": "HTTPHeader describes a custom header to be used in HTTP probes", 
                    "properties": {
                      "name": {
                        "type": "string", 
                        "description": "The header field name"
                      }, 
                      "value": {
                        "type": "string", 
                        "description": "The header field value"
                      }
                    }
                  }, 
                  "type": "array", 
                  "description": "Custom headers to set in the request. HTTP allows repeated headers."
                }, 
                "port": {
                  "oneOf": [
                    {
                      "type": "string"
                    }, 
                    {
                      "type": "integer"
                    }
                  ]
                }
              }
            }, 
            "tcpSocket": {
              "additionalProperties": false, 
              "required": [
                "port"
              ], 
              "type": "object", 
              "description": "TCPSocketAction describes an action based on opening a socket", 
              "properties": {
                "host": {
                  "type": "string", 
                  "description": "Optional: Host name to connect to, defaults to the pod IP."
                }, 
                "port": {
                  "oneOf": [
                    {
                      "type": "string"
                    }, 
                    {
                      "type": "integer"
                    }
                  ]
                }
              }
            }, 
            "exec": {
              "additionalProperties": false, 
              "type": "object", 
              "description": "ExecAction describes a \"run in container\" action.", 
              "properties": {
                "command": {
                  "items": {
                    "type": "string"
                  }, 
                  "type": "array", 
                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
                }
              }
            }
          }
        }
      }
    }, 
    "ports": {
      "x-kubernetes-list-type": "map", 
      "items": {
        "additionalProperties": false, 
        "required": [
          "containerPort"
        ], 
        "type": "object", 
        "description": "ContainerPort represents a network port in a single container.", 
        "properties": {
          "hostIP": {
            "type": "string", 
            "description": "What host IP to bind the external port to."
          }, 
          "protocol": {
            "type": "string", 
            "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\"."
          }, 
          "containerPort": {
            "type": "integer", 
            "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.", 
            "format": "int32"
          }, 
          "name": {
            "type": "string", 
            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
          }, 
          "hostPort": {
            "type": "integer", 
            "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.", 
            "format": "int32"
          }
        }
      }, 
      "x-kubernetes-patch-strategy": "merge", 
      "x-kubernetes-list-map-keys": [
        "containerPort", 
        "protocol"
      ], 
      "x-kubernetes-patch-merge-key": "containerPort", 
      "type": [
        "array", 
        "null"
      ], 
      "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated."
    }, 
    "resources": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "ResourceRequirements describes the compute resource requirements.", 
      "properties": {
        "requests": {
          "additionalProperties": {
            "oneOf": [
              {
                "type": "string"
              }, 
              {
                "type": "integer"
              }
            ]
          }, 
          "type": "object", 
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
        }, 
        "limits": {
          "additionalProperties": {
            "oneOf": [
              {
                "type": "string"
              }, 
              {
                "type": "integer"
              }
            ]
          }, 
          "type": "object", 
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/"
        }
      }
    }, 
    "stdinOnce": {
      "type": "boolean", 
      "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
    }
  }
}