{
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "description": "NodeStatus is information about the current status of a node.", 
  "properties": {
    "capacity": {
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string"
          }, 
          {
            "type": "integer"
          }
        ]
      }, 
      "type": "object", 
      "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity"
    }, 
    "addresses": {
      "items": {
        "required": [
          "type", 
          "address"
        ], 
        "type": "object", 
        "description": "NodeAddress contains information for the node's address.", 
        "properties": {
          "type": {
            "type": "string", 
            "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
          }, 
          "address": {
            "type": "string", 
            "description": "The node address."
          }
        }
      }, 
      "x-kubernetes-patch-merge-key": "type", 
      "type": [
        "array", 
        "null"
      ], 
      "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses", 
      "x-kubernetes-patch-strategy": "merge"
    }, 
    "images": {
      "items": {
        "required": [
          "names"
        ], 
        "type": "object", 
        "description": "Describe a container image", 
        "properties": {
          "sizeBytes": {
            "type": "integer", 
            "description": "The size of the image in bytes.", 
            "format": "int64"
          }, 
          "names": {
            "items": {
              "type": "string"
            }, 
            "type": "array", 
            "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]"
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "List of container images on this node"
    }, 
    "nodeInfo": {
      "required": [
        "machineID", 
        "systemUUID", 
        "bootID", 
        "kernelVersion", 
        "osImage", 
        "containerRuntimeVersion", 
        "kubeletVersion", 
        "kubeProxyVersion", 
        "operatingSystem", 
        "architecture"
      ], 
      "type": "object", 
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.", 
      "properties": {
        "kernelVersion": {
          "type": "string", 
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
        }, 
        "kubeletVersion": {
          "type": "string", 
          "description": "Kubelet Version reported by the node."
        }, 
        "containerRuntimeVersion": {
          "type": "string", 
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
        }, 
        "machineID": {
          "type": "string", 
          "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
        }, 
        "kubeProxyVersion": {
          "type": "string", 
          "description": "KubeProxy Version reported by the node."
        }, 
        "bootID": {
          "type": "string", 
          "description": "Boot ID reported by the node."
        }, 
        "osImage": {
          "type": "string", 
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
        }, 
        "architecture": {
          "type": "string", 
          "description": "The Architecture reported by the node"
        }, 
        "systemUUID": {
          "type": "string", 
          "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html"
        }, 
        "operatingSystem": {
          "type": "string", 
          "description": "The Operating System reported by the node"
        }
      }
    }, 
    "config": {
      "type": "object", 
      "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.", 
      "properties": {
        "active": {
          "type": "object", 
          "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.", 
          "properties": {
            "configMap": {
              "required": [
                "namespace", 
                "name", 
                "kubeletConfigKey"
              ], 
              "type": "object", 
              "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.", 
              "properties": {
                "kubeletConfigKey": {
                  "type": "string", 
                  "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                }, 
                "resourceVersion": {
                  "type": "string", 
                  "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                }, 
                "namespace": {
                  "type": "string", 
                  "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                }, 
                "uid": {
                  "type": "string", 
                  "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                }, 
                "name": {
                  "type": "string", 
                  "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                }
              }
            }
          }
        }, 
        "assigned": {
          "type": "object", 
          "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.", 
          "properties": {
            "configMap": {
              "required": [
                "namespace", 
                "name", 
                "kubeletConfigKey"
              ], 
              "type": "object", 
              "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.", 
              "properties": {
                "kubeletConfigKey": {
                  "type": "string", 
                  "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                }, 
                "resourceVersion": {
                  "type": "string", 
                  "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                }, 
                "namespace": {
                  "type": "string", 
                  "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                }, 
                "uid": {
                  "type": "string", 
                  "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                }, 
                "name": {
                  "type": "string", 
                  "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                }
              }
            }
          }
        }, 
        "error": {
          "type": "string", 
          "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions."
        }, 
        "lastKnownGood": {
          "type": "object", 
          "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.", 
          "properties": {
            "configMap": {
              "required": [
                "namespace", 
                "name", 
                "kubeletConfigKey"
              ], 
              "type": "object", 
              "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.", 
              "properties": {
                "kubeletConfigKey": {
                  "type": "string", 
                  "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                }, 
                "resourceVersion": {
                  "type": "string", 
                  "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                }, 
                "namespace": {
                  "type": "string", 
                  "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                }, 
                "uid": {
                  "type": "string", 
                  "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                }, 
                "name": {
                  "type": "string", 
                  "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                }
              }
            }
          }
        }
      }
    }, 
    "volumesAttached": {
      "items": {
        "required": [
          "name", 
          "devicePath"
        ], 
        "type": "object", 
        "description": "AttachedVolume describes a volume attached to a node", 
        "properties": {
          "devicePath": {
            "type": "string", 
            "description": "DevicePath represents the device path where the volume should be available"
          }, 
          "name": {
            "type": "string", 
            "description": "Name of the attached volume"
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "List of volumes that are attached to the node."
    }, 
    "allocatable": {
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string"
          }, 
          {
            "type": "integer"
          }
        ]
      }, 
      "type": "object", 
      "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity."
    }, 
    "volumesInUse": {
      "items": {
        "type": [
          "string", 
          "null"
        ]
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "List of attachable volumes in use (mounted) by the node."
    }, 
    "daemonEndpoints": {
      "type": "object", 
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.", 
      "properties": {
        "kubeletEndpoint": {
          "required": [
            "Port"
          ], 
          "type": "object", 
          "description": "DaemonEndpoint contains information about a single Daemon endpoint.", 
          "properties": {
            "Port": {
              "type": "integer", 
              "description": "Port number of the given endpoint.", 
              "format": "int32"
            }
          }
        }
      }
    }, 
    "phase": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated."
    }, 
    "conditions": {
      "items": {
        "required": [
          "type", 
          "status"
        ], 
        "type": "object", 
        "description": "NodeCondition contains condition information for a node.", 
        "properties": {
          "status": {
            "type": "string", 
            "description": "Status of the condition, one of True, False, Unknown."
          }, 
          "lastTransitionTime": {
            "type": "string", 
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.", 
            "format": "date-time"
          }, 
          "lastHeartbeatTime": {
            "type": "string", 
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.", 
            "format": "date-time"
          }, 
          "reason": {
            "type": "string", 
            "description": "(brief) reason for the condition's last transition."
          }, 
          "message": {
            "type": "string", 
            "description": "Human readable message indicating details about last transition."
          }, 
          "type": {
            "type": "string", 
            "description": "Type of node condition."
          }
        }
      }, 
      "x-kubernetes-patch-merge-key": "type", 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition", 
      "x-kubernetes-patch-strategy": "merge"
    }
  }
}